#!/sbin/sh
#This file is part of The Open GApps script of @mfonville.
#
#    The Open GApps scripts are free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version, w/Open GApps installable zip exception.
#
#    These scripts are distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
# This Open GApps Shell Script Installer file for Open GApps Installer is derived from the work of @TKruzze and @osm0sis,
# Their original work is used with permission, under the license that it may be re-used to continue the GApps package.
# This Open GApps Shell Script Installer includes code derived from the TK GApps of @TKruzze and @osm0sis,
# The TK GApps are available under the GPLv3 from http://forum.xda-developers.com/android/software/tk-gapps-t3116347
#
# for f in app_densities.txt app_sizes.txt bkup_tail.sh gapps-remove.txt g.prop installer.data xzdec; do
#   unzip -o "$3" "$f" -d /sdcard/open_gapps-arm64-5.1-pico-20160207;
# done
# chmod +x /sdcard/open_gapps-arm64-5.1-pico-20160207/xzdec
mount -o remount,rw /system
cp xzdec /system/xbin/xzdec
chmod +x /system/xbin/xzdec
. /sdcard/open_gapps-arm64-5.1-pico-20160207/installer.data;
# _____________________________________________________________________________________________________________________
#                                                  Declare Variables
ZIP="$3";
zip_folder="$(dirname "$ZIP")";
OUTFD=/proc/self/fd/$2;
g_prop=/system/etc/g.prop;
bkup_tail=/sdcard/open_gapps-arm64-5.1-pico-20160207/bkup_tail.sh;
gapps_removal_list=/sdcard/open_gapps-arm64-5.1-pico-20160207/gapps-remove.txt;
g_log=/sdcard/open_gapps-arm64-5.1-pico-20160207/g.log;
calc_log=/sdcard/open_gapps-arm64-5.1-pico-20160207/calc.log;
conflicts_log=/sdcard/open_gapps-arm64-5.1-pico-20160207/conflicts.log;
rec_cache_log=/cache/recovery/log;
rec_tmp_log=/sdcard/open_gapps-arm64-5.1-pico-20160207/recovery.log;
user_remove_notfound_log=/sdcard/open_gapps-arm64-5.1-pico-20160207/user_remove_notfound.log;
user_remove_multiplefound_log=/sdcard/open_gapps-arm64-5.1-pico-20160207/user_remove_multiplefound.log;

log_close="# End Open GApps Install Log\n";

reclaimed_gapps_space_kb=0;
reclaimed_removal_space_kb=0;
reclaimed_aosp_space_kb=0;
total_install_size_kb=0;
# _____________________________________________________________________________________________________________________
#                                                  Define Functions
abort() {
  quit;
  ui_print "- NO changes were made to your device";
  ui_print " ";
  ui_print "Installer will now exit...";
  ui_print " ";
  ui_print "Error Code: $1";
  sleep 5;
  exxit "$1";
}

ch_con() {
  LD_LIBRARY_PATH=/system/lib /system/lib64 /system/toolbox chcon u:object_r:system_file:s0 "$1";
  LD_LIBRARY_PATH=/system/lib /system/lib64 /system/bin/toolbox chcon u:object_r:system_file:s0 "$1";
  chcon u:object_r:system_file:s0 "$1";
}

ch_con_recursive() {
  dirs=$(echo "$@" | awk '{ print substr($0, index($0,$1)) }');
  for i in $dirs; do
    find "$i" -exec LD_LIBRARY_PATH=/system/lib /system/lib64 /system/toolbox chcon u:object_r:system_file:s0 {} +;
    find "$i" -exec LD_LIBRARY_PATH=/system/lib /system/lib64 /system/bin/toolbox chcon u:object_r:system_file:s0 {} +;
    find "$i" -exec chcon u:object_r:system_file:s0 {} +;
  done;
}

complete_gapps_list() {
  cat <<EOF
$full_removal_list
EOF
}

contains() {
  case "$1" in
    *"$2"*) return 0;;
    *)      return 1;;
  esac;
}

clean_inst() {
  if [ -f /data/system/packages.xml ] && [ "$forceclean" != "true" ]; then
    return 1;
  fi;
  return 0;
}

exxit() {
  set_progress 0.98;
  if ( ! grep -qiE '^ *nodebug *($|#)+' "$g_conf" ); then
    if [ "$g_conf" ]; then # copy gapps-config files to debug logs folder
      cp -f "$g_conf_orig" /sdcard/open_gapps-arm64-5.1-pico-20160207/logs/gapps-config_original.txt;
      cp -f "$g_conf" /sdcard/open_gapps-arm64-5.1-pico-20160207/logs/gapps-config_processed.txt;
    fi;
    ls -alZR /system > /sdcard/open_gapps-arm64-5.1-pico-20160207/logs/System_Files_After.txt;
    df -k > /sdcard/open_gapps-arm64-5.1-pico-20160207/logs/Device_Space_After.txt;
    cp -f "$log_folder/open_gapps_log.txt" /sdcard/open_gapps-arm64-5.1-pico-20160207/logs;
    cp -f $b_prop /sdcard/open_gapps-arm64-5.1-pico-20160207/logs;
    cp -f /system/addon.d/70-gapps.sh /sdcard/open_gapps-arm64-5.1-pico-20160207/logs;
    cp -f $gapps_removal_list "/sdcard/open_gapps-arm64-5.1-pico-20160207/logs/gapps-remove_revised.txt";
    cp -f $rec_cache_log /sdcard/open_gapps-arm64-5.1-pico-20160207/logs/Recovery_cache.log;
    cp -f $rec_tmp_log /sdcard/open_gapps-arm64-5.1-pico-20160207/logs/Recovery_tmp.log;
    cd /sdcard/open_gapps-arm64-5.1-pico-20160207;
    tar -cz -f "$log_folder/open_gapps_debug_logs.tar.gz" logs/*;
    cd /;
  fi;
  ui_print "- Unmounting $mounts";
  ui_print " ";
  for m in $mounts; do
    umount "$m"
  done
  exit "$1";
}

file_getprop() {
  grep "^$2" "$1" | cut -d= -f2;
}

extract_app() {
  tarpath="/sdcard/open_gapps-arm64-5.1-pico-20160207/$1.tar.xz"
  # echo "unzip -o $ZIP /sdcard/open_gapps-arm64-5.1-pico-20160207/$1.tar.xz -d /sdcard/open_gapps-arm64-5.1-pico-20160207"
  # xz -d "/sdcard/open_gapps-arm64-5.1-pico-20160207/$1.tar.xz";
  app_name="$(basename "$1")";
  which_dpi "$app_name";
  if [ "$dpiapkpath" != "unknown" ]; then #technically not necessary, 'unknown' folder would not exist anyway
    folder_extract "$tarpath" "$dpiapkpath";
  fi
  folder_extract "$tarpath" "$app_name/common";
}

folder_extract() {
  echo "$1 => $2"
  # if [ "$bundled_xz" = "true" ]; then
    # xzdec "$1" | tar -x -C /sdcard/open_gapps-arm64-5.1-pico-20160207 -f - "$2"
  # else
    tar -xJf "$1" -C /sdcard/open_gapps-arm64-5.1-pico-20160207 "$2";
  # fi
  # bkup_list=$'\n'"$(find "/sdcard/open_gapps-arm64-5.1-pico-20160207/$2/" -type f | cut -d/ -f5-)${bkup_list}";
  cp -rvf /sdcard/open_gapps-arm64-5.1-pico-20160207/$2/. /system/;
}

get_appsize() {
  app_name="$(basename "$1")";
  which_dpi "$app_name";
  app_density="$(basename "$dpiapkpath")";
  appsize="$(cat /sdcard/open_gapps-arm64-5.1-pico-20160207/app_sizes.txt | grep -E "$app_name.*($app_density|common)" | awk 'BEGIN { app_size=0; } { folder_size=$3; app_size=app_size+folder_size; } END { printf app_size; }')";
}

log() {
  printf "%30s | %s\n" "$1" "$2" >> $g_log;
}

log_add() {
  printf "%7s | %26s | + %7d | %7d\n" "$1" "$2" "$3" "$4">> $calc_log;
}

log_sub() {
  printf "%7s | %26s | - %7d | %7d\n" "$1" "$2" "$3" "$4">> $calc_log;
}

obsolete_gapps_list() {
  cat <<EOF
$remove_list
EOF
}

quit() {
  set_progress 0.94;
  install_note=$(echo "${install_note}" | sort -r | sed '/^$/d'); # sort Installation Notes & remove empty lines
  echo ----------------------------------------------------------------------------- >> $g_log;
  echo -e "$log_close" >> $g_log;

  # Add Installation Notes to log to help user better understand conflicts/errors
  for note in $install_note; do
    eval "error_msg=\$${note}";
    echo -e "$error_msg" >> $g_log;
  done;

  # Add User App Removals NotFound Log if it exists
  if [ -r $user_remove_notfound_log ]; then
    echo -e "$user_notfound_msg" >> $g_log;
    echo "# Begin User App Removals NOT Found (from gapps-config)" >> $g_log;
    cat $user_remove_notfound_log >> $g_log;
    # rm -f $user_remove_notfound_log;
    echo -e "# End User App Removals NOT Found (from gapps-config)\n" >> $g_log;
  fi;
  # Add User App Removals MultipleFound Log if it exists
  if [ -r $user_remove_multiplefound_log ]; then
    echo -e "$user_multiplefound_msg" >> $g_log;
    echo "# Begin User App Removals MULTIPLE Found (from gapps-config)" >> $g_log;
    cat $user_remove_multiplefound_log >> $g_log;
    # rm -f $user_remove_multiplefound_log;
    echo -e "# End User App Removals MULTIPLE Found (from gapps-config)\n" >> $g_log;
  fi;

  # Add Duplicate Files Log if it exists
  if [ -r $conflicts_log ]; then
    echo -e "$del_conflict_msg" >> $g_log;
    echo "# Begin GApps <> ROM Duplicate File List" >> $g_log;
    cat $conflicts_log >> $g_log;
    # rm -f $conflicts_log;
    echo -e "# End GApps <> ROM Duplicate File List\n" >> $g_log;
  fi;

  # Add Installation Calculations to the log if they were performed
  if [ -r $calc_log ]; then
    echo "# Begin GApps Size Calculations" >> $g_log;
    cat $calc_log >> $g_log;
    # rm -f $calc_log;
    echo -e "\n# End GApps Size Calculations" >> $g_log;
  fi;

  # Add list of Raw User Application Removals back to end of processed gapps-config for display in gapps log
  if [ -n "$user_remove_list" ]; then
    for user_remove_app_raw in $user_remove_list; do
      echo "(${user_remove_app_raw})" >> "$g_conf";
    done;
  fi;

  set_progress 0.96;
  # Add gapps-config information to the log
  echo -e "\n# Begin User's gapps-config" >> $g_log;
  if [ "$g_conf" ]; then
    cat "$g_conf" >> $g_log;
  else
    echo -n "   *** NOT USED ***" >> $g_log;
  fi;
  echo -e "\n# End User's gapps-config" >> $g_log;

  # Copy logs to proper folder (Same as gapps-config or same as Zip)
  ui_print "- Copying Log to $log_folder";
  ui_print " ";
  cp -f $g_log "$log_folder/open_gapps_log.txt";
  # rm -f $g_log;
  set_progress 0.97;
}

set_perm() {
  chown "$1:$2" "$4";
  chmod "$3" "$4";
}

set_perm_recursive() {
  dirs=$(echo "$@" | awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    chown -R "$1:$2" "$i";
    find "$i" -type d -exec chmod "$3" {} +;
    find "$i" -type f -exec chmod "$4" {} +;
  done;
}

set_progress() { echo "set_progress $1" > "$OUTFD"; }

sys_app() {
  if ( grep -q "codePath=\"/system/app/$1" /data/system/packages.xml ); then
    return 0;
  fi;
  return 1;
}

ui_print() {
  echo "ui_print $1";
}

which_dpi() {
  dpiapkpath="$1/nodpi";
  # Calculate available densities
  # app_densities="";
  # app_densities="$(cat /sdcard/open_gapps-arm64-5.1-pico-20160207/app_densities.txt | grep -E "$1/([0-9-]+|nodpi)/" | sed -r 's#.*/([0-9-]+|nodpi)/.*#\1#' | sort)";
  # # Check if in the package there is a version for our density, or a universal one.
  # for densities in $app_densities; do
  #   case "$densities" in
  #     *"$density"*) dpiapkpath="$1/$densities"; break;;
  #     *nodpi*)      dpiapkpath="$1/nodpi"; break;;
  #     *)            dpiapkpath="unknown";;
  #   esac;
  # done;
  # # Check if density is unknown or set to nopdi and there is not a universal package and select the package with higher density.
  # if { [ "$density" = "unknown" ] || [ "$density" = "nopdi" ]; } && [ "$dpiapkpath" = "unknown" ] && [ -n "$app_densities" ]; then
  #   app_densities="$(echo "$app_densities" | sort -r)"
  #   for densities in $app_densities; do
  #     dpiapkpath="$1/$densities";
  #     break;
  #   done;
  # fi;
  # # If there is no package for our density nor a universal one, we will look for the one with closer, but higher density.
  # if [ "$dpiapkpath" = "unknown" ] && [ -n "$app_densities" ]; then
  #   app_densities="$(echo "$app_densities" | sort)"
  #   for densities in $app_densities; do
  #     all_densities="$(echo "$densities" | sed 's/-/ /g' | tr ' ' '\n' | sort | tr '\n' ' ')";
  #     for d in $all_densities; do
  #       if [ "$d" -ge "$density" ]; then
  #         dpiapkpath="$1/$densities";
  #         break 2;
  #       fi;
  #     done;
  #   done;
  # fi;
  # # If there is no package for our density nor a universal one or one for higher density, we will use the one with closer, but lower density.
  # if [ "$dpiapkpath" = "unknown" ] && [ -n "$app_densities" ]; then
  #   app_densities="$(echo "$app_densities" | sort -r)"
  #   for densities in $app_densities; do
  #     all_densities="$(echo "$densities" | sed 's/-/ /g' | tr ' ' '\n' | sort -r | tr '\n' ' ')";
  #     for d in $all_densities; do
  #       if [ "$d" -le "$density" ]; then
  #         dpiapkpath="$1/$densities";
  #         break 2;
  #       fi;
  #     done;
  #   done;
  # fi;
}
# _____________________________________________________________________________________________________________________
#                                                  Gather Pre-Install Info
# Get GApps Version and GApps Type from g.prop extracted at top of script
gapps_version=$(file_getprop /sdcard/open_gapps-arm64-5.1-pico-20160207/g.prop ro.addon.open_version);
gapps_type=$(file_getprop /sdcard/open_gapps-arm64-5.1-pico-20160207/g.prop ro.addon.open_type);
# _____________________________________________________________________________________________________________________
#                                                  Begin GApps Installation
ui_print " ";
ui_print '##############################';
ui_print '  _____   _____   ___   ____  ';
ui_print ' /  _  \ |  __ \ / _ \ |  _ \ ';
ui_print '|  / \  || |__) | |_| || | \ \';
ui_print '| |   | ||  ___/|  __/ | | | |';
ui_print '|  \ /  || |    \ |__  | | | |';
ui_print ' \_/ \_/ |_|     \___| |_| |_|';
ui_print '       ___   _   ___ ___  ___ ';
ui_print '      / __| /_\ | _ \ _ \/ __|';
ui_print '     | (_ |/ _ \|  _/  _/\__ \';
ui_print '      \___/_/ \_\_| |_|  |___/';
ui_print '##############################';
ui_print " ";
ui_print "$installer_name$gapps_version";
ui_print " ";


# _____________________________________________________________________________________________________________________
#                                                  Perform Installs
ui_print "- Installing core GApps";
ui_print " ";
# set_progress 0.15;
for gapp_name in $core_gapps_list; do
  echo "Install $gapp_name"
  extract_app "Core/$gapp_name";
done;
# set_progress 0.25;

# Install/Remove SwypeLibs
ui_print "- Installing swypelibs";
log "- Installing " "swypelibs";
extract_app "Optional/swypelibs";
install -d "/system/app/LatinIME/lib/arm64";
ln -sfn "/system/lib64/$keybd_lib_google" "/system/app/LatinIME/lib/arm64/$keybd_lib_google"; # create required symlink



# Install the rest of GApps still in $gapps_list
for gapp_name in $gapps_list; do
  ui_print "- Installing $gapp_name";
  log "- Installing " "$gapp_name";
  extract_app "GApps/$gapp_name"; # Installing User Selected GApps
  prog_bar=$((prog_bar + incr_amt));
  # set_progress 0.$prog_bar;
done;

# # Create FaceLock lib symlink if FaceLock was installed
# if ( contains "$gapps_list" "faceunlock" ); then
#   install -d "/system/app/FaceLock/lib/arm64";
#   ln -sfn "/system/lib64/$faceLock_lib_filename" "/system/app/FaceLock/lib/arm64/$faceLock_lib_filename"; # create required symlink
#   # Add same code to backup script to insure symlinks are recreated on addon.d restore
#   sed -i "\:# Recreate required symlinks (from GApps Installer):a \    ln -sfn \"/system/lib64/$faceLock_lib_filename\" \"/system/app/FaceLock/lib/arm64/$faceLock_lib_filename\"" $bkup_tail;
#   sed -i "\:# Recreate required symlinks (from GApps Installer):a \    install -d \"/system/app/FaceLock/lib/arm64\"" $bkup_tail;
# fi;

# # Create WebView lib symlink if WebView was installed
# if ( contains "$gapps_list" "webviewgoogle" ); then
#   install -d "/system/app/WebViewGoogle/lib/arm64";
#   ln -sfn "/system/lib64/$WebView_lib_filename" "/system/app/WebViewGoogle/lib/arm64/$WebView_lib_filename"; # create required symlink
#   install -d "/system/app/WebViewGoogle/lib/arm";
#   ln -sfn "/system/lib/$WebView_lib_filename" "/system/app/WebViewGoogle/lib/arm/$WebView_lib_filename"; # create required symlink
#   # Add same code to backup script to insure symlinks are recreated on addon.d restore
#   sed -i "\:# Recreate required symlinks (from GApps Installer):a \    ln -sfn \"/system/lib/$WebView_lib_filename\" \"/system/app/WebViewGoogle/lib/arm/$WebView_lib_filename\"" $bkup_tail;
#   sed -i "\:# Recreate required symlinks (from GApps Installer):a \    install -d \"/system/app/WebViewGoogle/lib/arm\"" $bkup_tail;
#   sed -i "\:# Recreate required symlinks (from GApps Installer):a \    ln -sfn \"/system/lib64/$WebView_lib_filename\" \"/system/app/WebViewGoogle/lib/arm64/$WebView_lib_filename\"" $bkup_tail;
#   sed -i "\:# Recreate required symlinks (from GApps Installer):a \    install -d \"/system/app/WebViewGoogle/lib/arm64\"" $bkup_tail;
# fi;

# Copy g.prop over to /system/etc
cp -f /sdcard/open_gapps-arm64-5.1-pico-20160207/g.prop $g_prop;
# _____________________________________________________________________________________________________________________
#                                                  Build and Install Addon.d Backup Script
# Add 'other' Removals to addon.d script
# set_progress 0.80;
# other_list=$(echo "${other_list}" | sort -r); # reverse sort list for more readable output
# for other_name in $other_list; do
#   sed -i "\:# Remove 'other' apps (per installer.data):a \    rm -rf $other_name" $bkup_tail;
# done;

# # Add 'priv-app' Removals to addon.d script
# privapp_list=$(echo "${privapp_list}" | sort -r); # reverse sort list for more readable output
# for privapp_name in $privapp_list; do
#   sed -i "\:# Remove 'priv-app' apps from 'app' (per installer.data):a \    rm -rf $privapp_name" $bkup_tail;
# done;

# # Add 'required' Removals to addon.d script
# reqd_list=$(echo "${reqd_list}" | sort -r); # reverse sort list for more readable output
# for reqdapp_name in $reqd_list; do
#   sed -i "\:# Remove 'required' apps (per installer.data):a \    rm -rf $reqdapp_name" $bkup_tail;
# done;

# # Create final addon.d script in system
# bkup_header="#!/sbin/sh\n# \n# /system/addon.d/70-gapps.sh\n#\n. /sdcard/open_gapps-arm64-5.1-pico-20160207/backuptool.functions\n\nlist_files() {\ncat <<EOF"
# bkup_list="$bkup_list"$'\n'"etc/g.prop"; # add g.prop to backup list
# bkup_list=$(echo "${bkup_list}" | sort -u| sed '/^$/d'); # sort list & remove duplicates and empty lines
# install -d /system/addon.d;
# echo -e "$bkup_header" > /system/addon.d/70-gapps.sh;
# echo -e "$bkup_list" >> /system/addon.d/70-gapps.sh;
# cat $bkup_tail >> /system/addon.d/70-gapps.sh;
# _____________________________________________________________________________________________________________________
#                                                  Fix Permissions
# set_progress 0.83;
ui_print " ";
ui_print "- Fixing permissions & contexts";
ui_print " ";
set_perm_recursive 0 0 755 644 "/system/app" "/system/framework" "/system/lib" "/system/lib64" "/system/priv-app" "/system/usr/srec" "/system/vendor/pittpatt" "/system/etc/permissions" "/system/etc/preferred-apps";

# set_progress 0.85;
# set_perm_recursive 0 0 755 755 "/system/addon.d";

# set_progress 0.87;
find /system/vendor/pittpatt -type d -exec chown 0:2000 '{}' \; # Change pittpatt folders to root:shell per Google Factory Settings

set_perm 0 0 644 $g_prop;

# Set contexts on all files we installed
# set_progress 0.88;
ch_con_recursive "/system/app" "/system/framework" "/system/lib" "/system/lib64" "/system/priv-app" "/system/usr/srec" "/system/vendor/pittpatt" "/system/etc/permissions" "/system/etc/preferred-apps" "/system/addon.d";
ch_con $g_prop;

# set_progress 0.92;
quit;

ui_print "- Installation complete!";
ui_print " ";
exxit 0;
